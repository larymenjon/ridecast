import React, { useState, useMemo } from 'react';
import { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { DollarSign, ArrowUp, ArrowDown, CreditCard, Landmark, Bitcoin, FileText, PlusCircle, Trash2, PiggyBank, Target } from 'lucide-react';

// --- DADOS INICIAIS (MOCK) ---
const initialTransactions = [
  { id: 1, description: 'Salário Mensal', amount: 5000, type: 'income', category: 'Salário', date: '2024-07-01', paymentMethod: 'Conta Principal' },
  { id: 2, description: 'Aluguel', amount: 1500, type: 'expense', category: 'Moradia', date: '2024-07-05', paymentMethod: 'Conta Principal' },
  { id: 3, description: 'Supermercado', amount: 600, type: 'expense', category: 'Alimentação', date: '2024-07-10', paymentMethod: 'Cartão de Crédito' },
  { id: 4, description: 'Freelance Website', amount: 1200, type: 'income', category: 'Freelance', date: '2024-07-15', paymentMethod: 'Conta Principal' },
  { id: 5, description: 'Jantar com amigos', amount: 150, type: 'expense', category: 'Lazer', date: '2024-07-18', paymentMethod: 'Cartão de Crédito' },
  { id: 6, description: 'Academia', amount: 100, type: 'expense', category: 'Saúde', date: '2024-07-20', paymentMethod: 'Cartão de Débito' },
];

const initialPaymentMethods = [
    { id: 1, name: 'Conta Principal', type: 'Conta Bancária' },
    { id: 2, name: 'Cartão de Crédito', type: 'Cartão de Crédito' },
    { id: 3, name: 'Cartão de Débito', type: 'Cartão de Débito' },
];

const initialCryptoHoldings = [
    { id: 1, name: 'Bitcoin', symbol: 'BTC', amount: 0.05, currentPrice: 315000 },
    { id: 2, name: 'Ethereum', symbol: 'ETH', amount: 1.2, currentPrice: 17500 },
];

const initialSavingsGoals = [
    { id: 1, name: 'Viagem para a Europa', targetAmount: 20000, currentAmount: 4500 },
    { id: 2, name: 'Carro Novo', targetAmount: 70000, currentAmount: 25000 },
];


// --- CORES PARA GRÁFICOS ---
const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AF19FF', '#FF1943'];

// --- COMPONENTES AUXILIARES ---
const Card = ({ children, className = '' }) => (
  <div className={`bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg transition-all duration-300 ${className}`}>
    {children}
  </div>
);

const Modal = ({ isOpen, onClose, children, title }) => {
  if (!isOpen) return null;
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4">
      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-xl w-full max-w-md">
        <div className="flex justify-between items-center p-4 border-b dark:border-gray-700">
            <h3 className="text-xl font-bold">{title}</h3>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-800 dark:hover:text-gray-200 text-2xl">&times;</button>
        </div>
        <div className="p-6">
            {children}
        </div>
      </div>
    </div>
  );
};


// --- COMPONENTES PRINCIPAIS ---

const Dashboard = ({ transactions, cryptoHoldings }) => {
    const { totalIncome, totalExpense, balance } = useMemo(() => {
        const totalIncome = transactions.filter(t => t.type === 'income').reduce((acc, t) => acc + t.amount, 0);
        const totalExpense = transactions.filter(t => t.type === 'expense').reduce((acc, t) => acc + t.amount, 0);
        return { totalIncome, totalExpense, balance: totalIncome - totalExpense };
    }, [transactions]);

    const expenseByCategory = useMemo(() => {
        const expenses = transactions.filter(t => t.type === 'expense');
        const categoryMap = expenses.reduce((acc, t) => {
            acc[t.category] = (acc[t.category] || 0) + t.amount;
            return acc;
        }, {});
        return Object.entries(categoryMap).map(([name, value]) => ({ name, value }));
    }, [transactions]);
    
    const recentTransactions = [...transactions].sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5);

    return (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Coluna Principal */}
            <div className="lg:col-span-2 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <Card>
                        <h3 className="text-lg font-semibold text-gray-500 dark:text-gray-400">Balanço Total</h3>
                        <p className={`text-3xl font-bold ${balance >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                            R$ {balance.toFixed(2)}
                        </p>
                    </Card>
                    <Card>
                        <h3 className="text-lg font-semibold text-gray-500 dark:text-gray-400">Receitas</h3>
                        <p className="text-3xl font-bold text-cyan-500">R$ {totalIncome.toFixed(2)}</p>
                    </Card>
                    <Card>
                        <h3 className="text-lg font-semibold text-gray-500 dark:text-gray-400">Despesas</h3>
                        <p className="text-3xl font-bold text-orange-500">R$ {totalExpense.toFixed(2)}</p>
                    </Card>
                </div>
                <Card>
                    <h3 className="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">Despesas por Categoria</h3>
                    <div style={{ width: '100%', height: 300 }}>
                        <ResponsiveContainer>
                            <PieChart>
                                <Pie data={expenseByCategory} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={100} fill="#8884d8" label>
                                    {expenseByCategory.map((entry, index) => (
                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                    ))}
                                </Pie>
                                <Tooltip formatter={(value) => `R$ ${value.toFixed(2)}`} />
                                <Legend />
                            </PieChart>
                        </ResponsiveContainer>
                    </div>
                </Card>
            </div>

            {/* Coluna Lateral */}
            <div className="space-y-6">
                <Card>
                    <h3 className="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">Carteira Cripto</h3>
                    <div className="space-y-3">
                        {cryptoHoldings.map(crypto => (
                            <div key={crypto.id} className="flex justify-between items-center">
                                <div>
                                    <p className="font-bold">{crypto.name} ({crypto.symbol})</p>
                                    <p className="text-sm text-gray-500 dark:text-gray-400">{crypto.amount} {crypto.symbol}</p>
                                </div>
                                <p className="font-semibold">R$ {(crypto.amount * crypto.currentPrice).toFixed(2)}</p>
                            </div>
                        ))}
                    </div>
                     <p className="text-right text-lg font-bold mt-4 text-gray-700 dark:text-gray-200">
                        Total: R$ {cryptoHoldings.reduce((acc, c) => acc + c.amount * c.currentPrice, 0).toFixed(2)}
                    </p>
                </Card>
                <Card>
                    <h3 className="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">Transações Recentes</h3>
                     <div className="space-y-4">
                        {recentTransactions.map(t => (
                            <div key={t.id} className="flex items-center justify-between">
                                <div className="flex items-center gap-3">
                                    <div className={`p-2 rounded-full ${t.type === 'income' ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'}`}>
                                        {t.type === 'income' ? <ArrowUp size={16} /> : <ArrowDown size={16} />}
                                    </div>
                                    <div>
                                        <p className="font-semibold">{t.description}</p>
                                        <p className="text-sm text-gray-500 dark:text-gray-400">{new Date(t.date).toLocaleDateString('pt-BR')}</p>
                                    </div>
                                </div>
                                <p className={`font-bold ${t.type === 'income' ? 'text-green-500' : 'text-red-500'}`}>
                                    {t.type === 'income' ? '+' : '-'} R$ {t.amount.toFixed(2)}
                                </p>
                            </div>
                        ))}
                    </div>
                </Card>
            </div>
        </div>
    );
};

const AddTransactionForm = ({ onAdd, onClose, paymentMethods }) => {
    const [description, setDescription] = useState('');
    const [amount, setAmount] = useState('');
    const [type, setType] = useState('expense');
    const [category, setCategory] = useState('');
    const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
    const [paymentMethod, setPaymentMethod] = useState(paymentMethods[0]?.name || '');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!description || !amount || !category || !date || !paymentMethod) {
            // A simple alert for now, can be replaced with a better UI element
            window.alert('Por favor, preencha todos os campos.');
            return;
        }
        onAdd({
            id: Date.now(),
            description,
            amount: parseFloat(amount),
            type,
            category,
            date,
            paymentMethod,
        });
        onClose();
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Descrição</label>
                <input type="text" value={description} onChange={e => setDescription(e.target.value)} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
            </div>
            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Valor (R$)</label>
                <input type="number" step="0.01" value={amount} onChange={e => setAmount(e.target.value)} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
            </div>
            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Tipo</label>
                <select value={type} onChange={e => setType(e.target.value)} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="expense">Despesa</option>
                    <option value="income">Receita</option>
                </select>
            </div>
            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Categoria</label>
                <input type="text" value={category} onChange={e => setCategory(e.target.value)} placeholder="Ex: Alimentação, Transporte" className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
            </div>
            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Data</label>
                <input type="date" value={date} onChange={e => setDate(e.target.value)} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
            </div>
            <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Forma de Pagamento</label>
                <select value={paymentMethod} onChange={e => setPaymentMethod(e.target.value)} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    {paymentMethods.map(pm => <option key={pm.id} value={pm.name}>{pm.name}</option>)}
                </select>
            </div>
            <button type="submit" className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Adicionar
            </button>
        </form>
    );
};

const TransactionsPage = ({ transactions, onDeleteTransaction }) => {
    return (
        <Card>
            <h2 className="text-2xl font-bold mb-6 text-gray-800 dark:text-gray-100">Todas as Transações</h2>
            <div className="overflow-x-auto">
                <table className="w-full text-left">
                    <thead>
                        <tr className="border-b dark:border-gray-700">
                            <th className="p-4">Descrição</th>
                            <th className="p-4">Valor</th>
                            <th className="p-4">Categoria</th>
                            <th className="p-4">Data</th>
                            <th className="p-4">Ação</th>
                        </tr>
                    </thead>
                    <tbody>
                        {transactions.map(t => (
                            <tr key={t.id} className="border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50">
                                <td className="p-4 font-medium">{t.description}</td>
                                <td className={`p-4 font-semibold ${t.type === 'income' ? 'text-green-500' : 'text-red-500'}`}>
                                    {t.type === 'income' ? '+' : '-'} R$ {t.amount.toFixed(2)}
                                </td>
                                <td className="p-4">
                                    <span className="px-2 py-1 text-xs font-semibold rounded-full bg-gray-200 text-gray-700 dark:bg-gray-600 dark:text-gray-200">
                                        {t.category}
                                    </span>
                                </td>
                                <td className="p-4">{new Date(t.date).toLocaleDateString('pt-BR')}</td>
                                <td className="p-4">
                                    <button onClick={() => onDeleteTransaction(t.id)} className="text-red-500 hover:text-red-700">
                                        <Trash2 size={18} />
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </Card>
    );
};

const PaymentMethodsPage = ({ paymentMethods, onAddPaymentMethod, onDeletePaymentMethod }) => {
    const [name, setName] = useState('');
    const [type, setType] = useState('Cartão de Crédito');

    const handleAdd = () => {
        if (!name) return;
        onAddPaymentMethod({ id: Date.now(), name, type });
        setName('');
    };

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card>
                <h2 className="text-2xl font-bold mb-6 text-gray-800 dark:text-gray-100">Adicionar Forma de Pagamento</h2>
                <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Nome</label>
                        <input type="text" value={name} onChange={e => setName(e.target.value)} placeholder="Ex: Cartão Nubank" className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Tipo</label>
                        <select value={type} onChange={e => setType(e.target.value)} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                            <option>Cartão de Crédito</option>
                            <option>Cartão de Débito</option>
                            <option>Conta Bancária</option>
                            <option>Outro</option>
                        </select>
                    </div>
                    <button onClick={handleAdd} className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Adicionar
                    </button>
                </div>
            </Card>
            <Card>
                <h2 className="text-2xl font-bold mb-6 text-gray-800 dark:text-gray-100">Minhas Formas de Pagamento</h2>
                <div className="space-y-3">
                    {paymentMethods.map(pm => (
                        <div key={pm.id} className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div>
                                <p className="font-semibold">{pm.name}</p>
                                <p className="text-sm text-gray-500 dark:text-gray-400">{pm.type}</p>
                            </div>
                            <button onClick={() => onDeletePaymentMethod(pm.id)} className="text-red-500 hover:text-red-700">
                                <Trash2 size={18} />
                            </button>
                        </div>
                    ))}
                </div>
            </Card>
        </div>
    );
};

const ReportsPage = ({ transactions }) => {
    const [month, setMonth] = useState(new Date().toISOString().slice(0, 7)); // YYYY-MM

    const filteredTransactions = useMemo(() => {
        return transactions.filter(t => t.date.startsWith(month));
    }, [transactions, month]);

    const monthlyData = useMemo(() => {
        const income = filteredTransactions.filter(t => t.type === 'income').reduce((sum, t) => sum + t.amount, 0);
        const expense = filteredTransactions.filter(t => t.type === 'expense').reduce((sum, t) => sum + t.amount, 0);
        return [{ name: 'Receita', value: income }, { name: 'Despesa', value: expense }];
    }, [filteredTransactions]);

    return (
        <Card>
            <h2 className="text-2xl font-bold mb-6 text-gray-800 dark:text-gray-100">Relatório Mensal</h2>
            <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Selecione o Mês</label>
                <input type="month" value={month} onChange={e => setMonth(e.target.value)} className="mt-1 block w-full md:w-1/3 px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8 text-center">
                <div className="p-4 bg-cyan-50 dark:bg-cyan-900/50 rounded-lg">
                    <h4 className="font-semibold text-cyan-800 dark:text-cyan-200">Receita Total</h4>
                    <p className="text-2xl font-bold text-cyan-600 dark:text-cyan-400">R$ {monthlyData[0].value.toFixed(2)}</p>
                </div>
                 <div className="p-4 bg-orange-50 dark:bg-orange-900/50 rounded-lg">
                    <h4 className="font-semibold text-orange-800 dark:text-orange-200">Despesa Total</h4>
                    <p className="text-2xl font-bold text-orange-600 dark:text-orange-400">R$ {monthlyData[1].value.toFixed(2)}</p>
                </div>
                 <div className="p-4 bg-green-50 dark:bg-green-900/50 rounded-lg">
                    <h4 className="font-semibold text-green-800 dark:text-green-200">Economia</h4>
                    <p className="text-2xl font-bold text-green-600 dark:text-green-400">R$ {(monthlyData[0].value - monthlyData[1].value).toFixed(2)}</p>
                </div>
            </div>

            <h3 className="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">Receita vs. Despesa</h3>
            <div style={{ width: '100%', height: 300 }}>
                <ResponsiveContainer>
                    <BarChart data={monthlyData}>
                        <XAxis dataKey="name" />
                        <YAxis tickFormatter={(value) => `R$${value}`} />
                        <Tooltip formatter={(value) => `R$ ${value.toFixed(2)}`} />
                        <Bar dataKey="value">
                             {monthlyData.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={index === 0 ? '#00C49F' : '#FF8042'} />
                            ))}
                        </Bar>
                    </BarChart>
                </ResponsiveContainer>
            </div>
        </Card>
    );
};

// --- NOVOS COMPONENTES ---

const CryptoPage = ({ cryptoHoldings, onAddCrypto, onDeleteCrypto }) => {
    const [name, setName] = useState('');
    const [symbol, setSymbol] = useState('');
    const [amount, setAmount] = useState('');

    const handleAdd = () => {
        if (!name || !symbol || !amount) return;
        // In a real app, you would fetch the current price from an API
        const newCrypto = {
            id: Date.now(),
            name,
            symbol: symbol.toUpperCase(),
            amount: parseFloat(amount),
            currentPrice: Math.floor(Math.random() * 50000) + 1000 // Mock price
        };
        onAddCrypto(newCrypto);
        setName('');
        setSymbol('');
        setAmount('');
    };

    const totalValue = cryptoHoldings.reduce((acc, c) => acc + c.amount * c.currentPrice, 0);

    return (
        <div className="space-y-6">
             <Card>
                <h2 className="text-2xl font-bold mb-1 text-gray-800 dark:text-gray-100">Portfólio de Criptomoedas</h2>
                <p className="text-gray-500 dark:text-gray-400 mb-6">Valor Total do Portfólio: <span className="font-bold text-indigo-500">R$ {totalValue.toFixed(2)}</span></p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Nome</label>
                        <input type="text" value={name} onChange={e => setName(e.target.value)} placeholder="Ex: Solana" className="mt-1 block w-full input"/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Símbolo</label>
                        <input type="text" value={symbol} onChange={e => setSymbol(e.target.value)} placeholder="Ex: SOL" className="mt-1 block w-full input"/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Quantidade</label>
                        <input type="number" value={amount} onChange={e => setAmount(e.target.value)} placeholder="Ex: 10.5" className="mt-1 block w-full input"/>
                    </div>
                </div>
                <button onClick={handleAdd} className="w-full md:w-auto flex justify-center py-2 px-6 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Adicionar Cripto</button>
            </Card>
            <Card>
                <h3 className="text-xl font-bold mb-4 text-gray-700 dark:text-gray-200">Meus Ativos</h3>
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead>
                            <tr className="border-b dark:border-gray-700">
                                <th className="p-4">Ativo</th>
                                <th className="p-4">Quantidade</th>
                                <th className="p-4">Preço Atual</th>
                                <th className="p-4">Valor Total</th>
                                <th className="p-4">Ação</th>
                            </tr>
                        </thead>
                        <tbody>
                            {cryptoHoldings.map(c => (
                                <tr key={c.id} className="border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50">
                                    <td className="p-4 font-bold">{c.name} ({c.symbol})</td>
                                    <td className="p-4">{c.amount}</td>
                                    <td className="p-4">R$ {c.currentPrice.toFixed(2)}</td>
                                    <td className="p-4 font-semibold">R$ {(c.amount * c.currentPrice).toFixed(2)}</td>
                                    <td className="p-4">
                                        <button onClick={() => onDeleteCrypto(c.id)} className="text-red-500 hover:text-red-700"><Trash2 size={18} /></button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </Card>
        </div>
    );
};

const SavingsPage = ({ savingsGoals, onAddGoal, onDeleteGoal, onAddFunds }) => {
    const [isAddGoalModalOpen, setAddGoalModalOpen] = useState(false);
    const [isAddFundsModalOpen, setAddFundsModalOpen] = useState(null);
    const [goalName, setGoalName] = useState('');
    const [targetAmount, setTargetAmount] = useState('');
    const [fundsToAdd, setFundsToAdd] = useState('');

    const handleAddGoal = () => {
        if (!goalName || !targetAmount) return;
        onAddGoal({
            id: Date.now(),
            name: goalName,
            targetAmount: parseFloat(targetAmount),
            currentAmount: 0
        });
        setGoalName('');
        setTargetAmount('');
        setAddGoalModalOpen(false);
    };

    const handleAddFunds = () => {
        if (!fundsToAdd || !isAddFundsModalOpen) return;
        onAddFunds(isAddFundsModalOpen.id, parseFloat(fundsToAdd));
        setFundsToAdd('');
        setAddFundsModalOpen(null);
    };

    return (
        <>
            <div className="flex justify-between items-center mb-6">
                <h2 className="text-3xl font-bold text-gray-800 dark:text-gray-100">Metas de Poupança</h2>
                <button onClick={() => setAddGoalModalOpen(true)} className="flex items-center gap-2 py-2 px-4 font-semibold text-white bg-indigo-600 rounded-lg shadow-md hover:bg-indigo-700">
                    <PlusCircle size={20} />
                    Nova Meta
                </button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {savingsGoals.map(goal => {
                    const progress = (goal.currentAmount / goal.targetAmount) * 100;
                    return (
                        <Card key={goal.id} className="flex flex-col justify-between">
                            <div>
                                <div className="flex justify-between items-start">
                                    <h3 className="text-xl font-bold text-gray-800 dark:text-gray-100">{goal.name}</h3>
                                    <button onClick={() => onDeleteGoal(goal.id)} className="text-red-500 hover:text-red-700"><Trash2 size={18} /></button>
                                </div>
                                <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">Meta: R$ {goal.targetAmount.toFixed(2)}</p>
                                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mb-2">
                                    <div className="bg-green-500 h-2.5 rounded-full" style={{ width: `${progress > 100 ? 100 : progress}%` }}></div>
                                </div>
                                <div className="flex justify-between text-sm font-medium">
                                    <span className="text-green-600 dark:text-green-400">R$ {goal.currentAmount.toFixed(2)}</span>
                                    <span>{progress.toFixed(1)}%</span>
                                </div>
                            </div>
                            <button onClick={() => setAddFundsModalOpen(goal)} className="mt-6 w-full py-2 px-4 font-semibold text-indigo-600 bg-indigo-100 dark:bg-indigo-900/50 rounded-lg hover:bg-indigo-200 dark:hover:bg-indigo-900">
                                Adicionar Fundos
                            </button>
                        </Card>
                    );
                })}
            </div>

            {/* Modal para Adicionar Meta */}
            <Modal isOpen={isAddGoalModalOpen} onClose={() => setAddGoalModalOpen(false)} title="Criar Nova Meta">
                <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Nome da Meta</label>
                        <input type="text" value={goalName} onChange={e => setGoalName(e.target.value)} placeholder="Ex: Férias na Praia" className="mt-1 block w-full input"/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Valor da Meta (R$)</label>
                        <input type="number" value={targetAmount} onChange={e => setTargetAmount(e.target.value)} placeholder="Ex: 5000" className="mt-1 block w-full input"/>
                    </div>
                    <button onClick={handleAddGoal} className="w-full button-primary">Criar Meta</button>
                </div>
            </Modal>

            {/* Modal para Adicionar Fundos */}
            <Modal isOpen={!!isAddFundsModalOpen} onClose={() => setAddFundsModalOpen(null)} title={`Adicionar Fundos para "${isAddFundsModalOpen?.name}"`}>
                 <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Valor a Adicionar (R$)</label>
                        <input type="number" value={fundsToAdd} onChange={e => setFundsToAdd(e.target.value)} placeholder="Ex: 250" className="mt-1 block w-full input"/>
                    </div>
                    <button onClick={handleAddFunds} className="w-full button-primary">Confirmar</button>
                </div>
            </Modal>
        </>
    );
};


// --- COMPONENTE PRINCIPAL DO APP ---
export default function App() {
    const [page, setPage] = useState('dashboard');
    const [transactions, setTransactions] = useState(initialTransactions);
    const [paymentMethods, setPaymentMethods] = useState(initialPaymentMethods);
    const [cryptoHoldings, setCryptoHoldings] = useState(initialCryptoHoldings);
    const [savingsGoals, setSavingsGoals] = useState(initialSavingsGoals);
    const [isModalOpen, setIsModalOpen] = useState(false);

    // Handlers de Transação
    const handleAddTransaction = (newTransaction) => {
        setTransactions(prev => [newTransaction, ...prev]);
    };
    const handleDeleteTransaction = (id) => {
        setTransactions(prev => prev.filter(t => t.id !== id));
    };

    // Handlers de Forma de Pagamento
    const handleAddPaymentMethod = (newMethod) => {
        setPaymentMethods(prev => [...prev, newMethod]);
    };
    const handleDeletePaymentMethod = (id) => {
        setPaymentMethods(prev => prev.filter(pm => pm.id !== id));
    };

    // Handlers de Cripto
    const handleAddCrypto = (newCrypto) => {
        setCryptoHoldings(prev => [...prev, newCrypto]);
    };
    const handleDeleteCrypto = (id) => {
        setCryptoHoldings(prev => prev.filter(c => c.id !== id));
    };
    
    // Handlers de Metas de Poupança
    const handleAddGoal = (newGoal) => {
        setSavingsGoals(prev => [...prev, newGoal]);
    };
    const handleDeleteGoal = (id) => {
        setSavingsGoals(prev => prev.filter(g => g.id !== id));
    };
    const handleAddFundsToGoal = (goalId, amount) => {
        setSavingsGoals(prev => prev.map(g => g.id === goalId ? { ...g, currentAmount: g.currentAmount + amount } : g));
    };


    const NavItem = ({ icon, label, pageName }) => (
        <button
            onClick={() => setPage(pageName)}
            className={`flex items-center space-x-3 p-3 rounded-lg w-full text-left transition-colors duration-200 ${page === pageName ? 'bg-indigo-600 text-white shadow-lg' : 'text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'}`}
        >
            {icon}
            <span className="font-semibold">{label}</span>
        </button>
    );

    const renderPage = () => {
        switch (page) {
            case 'dashboard':
                return <Dashboard transactions={transactions} cryptoHoldings={cryptoHoldings} />;
            case 'transactions':
                return <TransactionsPage transactions={transactions} onDeleteTransaction={handleDeleteTransaction} />;
            case 'payment-methods':
                return <PaymentMethodsPage paymentMethods={paymentMethods} onAddPaymentMethod={handleAddPaymentMethod} onDeletePaymentMethod={handleDeletePaymentMethod} />;
            case 'crypto':
                return <CryptoPage cryptoHoldings={cryptoHoldings} onAddCrypto={handleAddCrypto} onDeleteCrypto={handleDeleteCrypto} />;
            case 'savings':
                return <SavingsPage savingsGoals={savingsGoals} onAddGoal={handleAddGoal} onDeleteGoal={handleDeleteGoal} onAddFunds={handleAddFundsToGoal} />;
            case 'reports':
                return <ReportsPage transactions={transactions} />;
            default:
                return <Dashboard transactions={transactions} cryptoHoldings={cryptoHoldings} />;
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans">
            <style>{`
                .input {
                    display: block;
                    width: 100%;
                    padding: 0.5rem 0.75rem;
                    background-color: #fff;
                    border: 1px solid #d1d5db;
                    border-radius: 0.375rem;
                    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
                }
                .dark .input {
                    background-color: #374151;
                    border-color: #4b5563;
                }
                .input:focus {
                    outline: 2px solid transparent;
                    outline-offset: 2px;
                    border-color: #4f46e5;
                    box-shadow: 0 0 0 2px #4f46e5;
                }
                .button-primary {
                    display: flex;
                    justify-content: center;
                    padding: 0.75rem 1rem;
                    border: 1px solid transparent;
                    border-radius: 0.375rem;
                    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
                    font-size: 0.875rem;
                    font-weight: 500;
                    color: #fff;
                    background-color: #4f46e5;
                }
                .button-primary:hover {
                    background-color: #4338ca;
                }
            `}</style>
            <div className="flex flex-col md:flex-row">
                {/* Sidebar */}
                <aside className="w-full md:w-64 bg-white dark:bg-gray-800 p-6 flex-shrink-0 md:min-h-screen border-r border-gray-200 dark:border-gray-700">
                    <div className="flex items-center space-x-3 mb-10">
                        <DollarSign className="text-indigo-500" size={32} />
                        <h1 className="text-2xl font-bold text-gray-800 dark:text-white">Smartfin</h1>
                    </div>
                    <nav className="space-y-4">
                        <NavItem icon={<Landmark size={20} />} label="Dashboard" pageName="dashboard" />
                        <NavItem icon={<FileText size={20} />} label="Transações" pageName="transactions" />
                        <NavItem icon={<CreditCard size={20} />} label="Pagamentos" pageName="payment-methods" />
                        <NavItem icon={<Bitcoin size={20} />} label="Criptomoedas" pageName="crypto" />
                        <NavItem icon={<PiggyBank size={20} />} label="Poupança" pageName="savings" />
                        <NavItem icon={<BarChart size={20} />} label="Relatórios" pageName="reports" />
                    </nav>
                    <div className="mt-10">
                        <button 
                            onClick={() => setIsModalOpen(true)}
                            className="w-full flex items-center justify-center space-x-2 bg-indigo-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-indigo-700 transition-transform transform hover:scale-105 shadow-lg"
                        >
                            <PlusCircle size={20} />
                            <span>Nova Transação</span>
                        </button>
                    </div>
                </aside>

                {/* Conteúdo Principal */}
                <main className="flex-1 p-6 md:p-10">
                    {renderPage()}
                </main>
            </div>
            
            <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title="Adicionar Nova Transação">
                <AddTransactionForm 
                    onAdd={handleAddTransaction} 
                    onClose={() => setIsModalOpen(false)}
                    paymentMethods={paymentMethods}
                />
            </Modal>
        </div>
    );
}
